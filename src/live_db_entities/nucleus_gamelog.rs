//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "nucleus_gamelog")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub url: String,
    #[sea_orm(unique)]
    pub google_id: Option<String>,
    pub name: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::association_association_logs::Entity")]
    AssociationAssociationLogs,
    #[sea_orm(has_many = "super::character_npc_logs::Entity")]
    CharacterNpcLogs,
    #[sea_orm(has_many = "super::item_artifact_logs::Entity")]
    ItemArtifactLogs,
    #[sea_orm(has_many = "super::item_item_logs::Entity")]
    ItemItemLogs,
    #[sea_orm(has_many = "super::place_export_logs::Entity")]
    PlaceExportLogs,
    #[sea_orm(has_many = "super::place_place_logs::Entity")]
    PlacePlaceLogs,
    #[sea_orm(has_many = "super::race_race_logs::Entity")]
    RaceRaceLogs,
}

impl Related<super::association_association_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AssociationAssociationLogs.def()
    }
}

impl Related<super::character_npc_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterNpcLogs.def()
    }
}

impl Related<super::item_artifact_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemArtifactLogs.def()
    }
}

impl Related<super::item_item_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemItemLogs.def()
    }
}

impl Related<super::place_export_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlaceExportLogs.def()
    }
}

impl Related<super::place_place_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlacePlaceLogs.def()
    }
}

impl Related<super::race_race_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RaceRaceLogs.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
