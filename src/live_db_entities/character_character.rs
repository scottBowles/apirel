//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "character_character")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub hit_die: Option<String>,
    pub strength: i32,
    pub dexterity: i32,
    pub constitution: i32,
    pub intelligence: i32,
    pub wisdom: i32,
    pub charisma: i32,
    pub copper_pieces: i32,
    pub silver_pieces: i32,
    pub electrum_pieces: i32,
    pub gold_pieces: i32,
    pub platinum_pieces: i32,
    pub max_hit_points: i32,
    pub temporary_hit_points: i32,
    pub damage_taken: i32,
    pub name: Option<String>,
    pub player_name: Option<String>,
    pub alignment: Option<String>,
    pub experience_points: i32,
    pub armor_class: i32,
    pub initiative: i32,
    pub speed: i32,
    pub num_hit_dice: i32,
    pub death_save_successes: i32,
    pub death_save_failures: i32,
    pub inspiration: bool,
    pub passive_wisdom: i32,
    pub passive_intelligence: i32,
    pub size: Option<String>,
    pub background_id: Option<i64>,
    pub race_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::character_attack::Entity")]
    CharacterAttack,
    #[sea_orm(
        belongs_to = "super::character_background::Entity",
        from = "Column::BackgroundId",
        to = "super::character_background::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CharacterBackground,
    #[sea_orm(has_many = "super::character_bond::Entity")]
    CharacterBond,
    #[sea_orm(has_many = "super::character_character_feats::Entity")]
    CharacterCharacterFeats,
    #[sea_orm(has_many = "super::character_character_features_and_traits::Entity")]
    CharacterCharacterFeaturesAndTraits,
    #[sea_orm(has_many = "super::character_character_proficiencies::Entity")]
    CharacterCharacterProficiencies,
    #[sea_orm(has_many = "super::character_classandlevel::Entity")]
    CharacterClassandlevel,
    #[sea_orm(has_many = "super::character_flaw::Entity")]
    CharacterFlaw,
    #[sea_orm(has_many = "super::character_ideal::Entity")]
    CharacterIdeal,
    #[sea_orm(has_many = "super::character_inventoryitem::Entity")]
    CharacterInventoryitem,
    #[sea_orm(has_many = "super::character_personalitytrait::Entity")]
    CharacterPersonalitytrait,
    #[sea_orm(
        belongs_to = "super::nucleus_user::Entity",
        from = "Column::UserId",
        to = "super::nucleus_user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    NucleusUser,
    #[sea_orm(
        belongs_to = "super::race_race::Entity",
        from = "Column::RaceId",
        to = "super::race_race::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    RaceRace,
}

impl Related<super::character_attack::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterAttack.def()
    }
}

impl Related<super::character_background::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterBackground.def()
    }
}

impl Related<super::character_bond::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterBond.def()
    }
}

impl Related<super::character_character_feats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterCharacterFeats.def()
    }
}

impl Related<super::character_character_features_and_traits::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterCharacterFeaturesAndTraits.def()
    }
}

impl Related<super::character_character_proficiencies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterCharacterProficiencies.def()
    }
}

impl Related<super::character_classandlevel::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterClassandlevel.def()
    }
}

impl Related<super::character_flaw::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterFlaw.def()
    }
}

impl Related<super::character_ideal::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterIdeal.def()
    }
}

impl Related<super::character_inventoryitem::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterInventoryitem.def()
    }
}

impl Related<super::character_personalitytrait::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterPersonalitytrait.def()
    }
}

impl Related<super::nucleus_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NucleusUser.def()
    }
}

impl Related<super::race_race::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RaceRace.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
