//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "nucleus_user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub password: String,
    pub last_login: Option<DateTimeWithTimeZone>,
    pub is_superuser: bool,
    #[sea_orm(unique)]
    pub username: String,
    pub first_name: String,
    pub last_name: String,
    pub email: String,
    pub is_staff: bool,
    pub is_active: bool,
    pub date_joined: DateTimeWithTimeZone,
    #[sea_orm(column_name = "isDM")]
    pub is_dm: bool,
    pub last_activity: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::association_association::Entity")]
    AssociationAssociation,
    #[sea_orm(has_one = "super::authtoken_token::Entity")]
    AuthtokenToken,
    #[sea_orm(has_many = "super::character_character::Entity")]
    CharacterCharacter,
    #[sea_orm(has_many = "super::character_npc::Entity")]
    CharacterNpc,
    #[sea_orm(has_many = "super::django_admin_log::Entity")]
    DjangoAdminLog,
    #[sea_orm(has_many = "super::item_artifact::Entity")]
    ItemArtifact,
    #[sea_orm(has_many = "super::item_item::Entity")]
    ItemItem,
    #[sea_orm(has_many = "super::nucleus_user_groups::Entity")]
    NucleusUserGroups,
    #[sea_orm(has_many = "super::nucleus_user_user_permissions::Entity")]
    NucleusUserUserPermissions,
    #[sea_orm(has_many = "super::place_export::Entity")]
    PlaceExport,
    #[sea_orm(has_many = "super::place_place::Entity")]
    PlacePlace,
    #[sea_orm(has_many = "super::race_race::Entity")]
    RaceRace,
}

impl Related<super::association_association::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AssociationAssociation.def()
    }
}

impl Related<super::authtoken_token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthtokenToken.def()
    }
}

impl Related<super::character_character::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterCharacter.def()
    }
}

impl Related<super::character_npc::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CharacterNpc.def()
    }
}

impl Related<super::django_admin_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DjangoAdminLog.def()
    }
}

impl Related<super::item_artifact::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemArtifact.def()
    }
}

impl Related<super::item_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemItem.def()
    }
}

impl Related<super::nucleus_user_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NucleusUserGroups.def()
    }
}

impl Related<super::nucleus_user_user_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NucleusUserUserPermissions.def()
    }
}

impl Related<super::place_export::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlaceExport.def()
    }
}

impl Related<super::place_place::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlacePlace.def()
    }
}

impl Related<super::race_race::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RaceRace.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
