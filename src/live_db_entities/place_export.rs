//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "place_export")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub created: DateTimeWithTimeZone,
    pub updated: DateTimeWithTimeZone,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(unique)]
    pub slug: String,
    pub thumbnail_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub markdown_notes: Option<String>,
    pub lock_time: Option<DateTimeWithTimeZone>,
    pub lock_user_id: Option<i64>,
    pub image_ids: Vec<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::nucleus_user::Entity",
        from = "Column::LockUserId",
        to = "super::nucleus_user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    NucleusUser,
    #[sea_orm(has_many = "super::place_export_logs::Entity")]
    PlaceExportLogs,
    #[sea_orm(has_many = "super::place_placeexport::Entity")]
    PlacePlaceexport,
}

impl Related<super::nucleus_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NucleusUser.def()
    }
}

impl Related<super::place_export_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlaceExportLogs.def()
    }
}

impl Related<super::place_placeexport::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlacePlaceexport.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
